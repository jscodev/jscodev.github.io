(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{378:function(t,s,a){"use strict";a.r(s);var r=a(42),_=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("因为这个专栏大多都是枯燥的教科书知识，所以别着急看那些生涩的要死的书本知识，先让咱们用大白话简单了解一下为什么要知道这个东西。")]),t._v(" "),a("p",[t._v("首先我们作为前端不能光拘泥于那一点写页面的能力，更应该拓展自己的理论知识，做到知其然知其所以然，很多人觉得前端写写页面效果就好了，但很多优化性操作如果不深究其原理是难以做出优质的项目的，其次就是一个优秀的公司一定是有自己的技术体系的，那么在跳槽的过程中，很有可能会遇到面试官会问出这些问题，想去大厂的朋友们就更是必考，那么，当这个时候我们该如何回答？")]),t._v(" "),a("h2",{attrs:{id:"http和https的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[t._v("#")]),t._v(" HTTP和HTTPS的区别")]),t._v(" "),a("p",[t._v("http是超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议，是万维网的数据通信的基础。")]),t._v(" "),a("p",[t._v("https就是http的安全版.")]),t._v(" "),a("ul",[a("li",[t._v("https协议需要申请SSL证书，有免费的也有收费的（这里推荐一个免费申请的通道"),a("a",{attrs:{href:"https://freessl.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("申请免费证书"),a("OutboundLink")],1),t._v("）。")]),t._v(" "),a("li",[t._v("http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。")]),t._v(" "),a("li",[t._v("http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。")]),t._v(" "),a("li",[t._v("http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。")])]),t._v(" "),a("h2",{attrs:{id:"tcp是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp是什么"}},[t._v("#")]),t._v(" TCP是什么")]),t._v(" "),a("p",[t._v("传输控制协议（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能。用户数据报协议（UDP）是同一层内另一个重要的传输协议。")]),t._v(" "),a("p",[t._v("在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。")]),t._v(" "),a("p",[t._v("应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分割成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来透过网络将包传送给接收端实体的TCP层。")]),t._v(" "),a("p",[t._v("TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认信息（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失并进行重传。TCP用一个校验和函数来检验数据是否有错误，在发送和接收时都要计算校验和。")]),t._v(" "),a("p",[a("strong",[t._v("在了解TCP连接之前，我们需要先知道这几个请求状态：")])]),t._v(" "),a("ul",[a("li",[t._v("LISTEN - 侦听来自远方TCP端口的连接请求")]),t._v(" "),a("li",[t._v("SYN-SENT - 在发送连接请求后等待匹配的连接请求")]),t._v(" "),a("li",[t._v("SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认")]),t._v(" "),a("li",[t._v("ESTABLISHED - 代表一个打开的连接，数据可以传送给用户即连接已经建立")]),t._v(" "),a("li",[t._v("FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认")]),t._v(" "),a("li",[t._v("FIN-WAIT-2 - 从远程TCP等待连接中断请求")]),t._v(" "),a("li",[t._v("CLOSE-WAIT - 等待从本地用户发来的连接中断请求")]),t._v(" "),a("li",[t._v("CLOSING - 等待远程TCP对连接中断的确认")]),t._v(" "),a("li",[t._v("LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认")]),t._v(" "),a("li",[t._v("TIME-WAIT - 等待足够的时间以确保远程TCP接收到连接中断请求的确认")]),t._v(" "),a("li",[t._v("CLOSED - 没有任何连接状态也就是关闭连接")])]),t._v(" "),a("h2",{attrs:{id:"tcp全双工特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp全双工特性"}},[t._v("#")]),t._v(" TCP全双工特性")]),t._v(" "),a("p",[t._v("这个概念还是比较好理解的，简单概括一下其实就是两端都可以接收和发送数据包，不过这是其中一个重要的特性，所以单拎出来一个小标题说一下，这样比嵌套在文章里更加让人印象印刻一些。")]),t._v(" "),a("h2",{attrs:{id:"三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),a("p",[t._v("放上一张图便于理解：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/computer/tcp.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一次握手：建立连接时，客户端发送SYN包到服务器，并进入SYN_SENT状态，等待服务器确认；")])]),t._v(" "),a("li",[a("p",[t._v("第二次握手：服务器收到SYN包，必须确认客户的SYN，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器 进入SYN-RECEIVED状态；")])]),t._v(" "),a("li",[a("p",[t._v("第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。")])])]),t._v(" "),a("p",[a("strong",[t._v("PS：关于SYN和ACK包的概念百度一下就可以，我这里为了方便大家就放上这两个概念：")])]),t._v(" "),a("p",[t._v("SYN: 是TCP/IP建立连接时使用的握手信号。在客户机和服务器之间建立正常的TCP网络连接时，客户机首先发出一个SYN消息，服务器使用SYN+ACK应答表示接收到了这个消息，最后客户机再以ACK消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。")]),t._v(" "),a("p",[t._v("ACK: 是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误。在TCP/IP协议中，如果接收方成功的接收到数据，那么会回复一个ACK数据。通常ACK信号有自己固定的格式,长度大小,由接收方回复给发送方。")]),t._v(" "),a("p",[a("strong",[t._v("为什么是三次握手，而不是四次、五次、N次？")])]),t._v(" "),a("p",[t._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误；通俗的讲也就是TCP之前发的连接请求因为某种原因在网络节点上滞留了一段时间，不过这个时候它已经是失散多年的孩子了，早已被客户端淡忘，当服务器端接到这个可怜的孩子后再给客户端发请求确认说：“这是不是你的孩子啊”，这时客户端已经忘记了这个孩子，所以并不会对服务端发送确认，服务端傻傻等待反馈会浪费资源；三次握手是确保最低次数获取对方状态，第二次握手把SYN和ACK合并发送完成连接，握手过程是为了确保客户端和服务端的双工连接是正常的，TCP连接双方必须确保有一次SYN和ACK包的发送。")]),t._v(" "),a("h2",{attrs:{id:"四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),a("ul",[a("li",[t._v("第一次挥手：客户端发出送FIN并且进入FIN_WAIT_1状态")]),t._v(" "),a("li",[t._v("第二次挥手：服务器收到客户端的后，发出ACK确认并进入CLOSE-WAIT状态")]),t._v(" "),a("li",[t._v("第三次挥手：客户端收到服务器确认结果后，进入FIN_WAIT_2状态。此时服务器发送释放FIN信号，服务器进入LAST-ACK")]),t._v(" "),a("li",[t._v("第四次挥手：客户端收到回复后，发送确认ACK，客户端进入TIME-WAIT，客户端经过等待后，客户端CLOSE，服务器收到确认后，立刻进入CLOSE状态")])]),t._v(" "),a("p",[a("strong",[t._v("为什么不可以和连接时候一样使用三次挥手?")])]),t._v(" "),a("p",[t._v("这是因为双工特性的的半关闭状态，客户端发送FIN只是单独关闭它自己的传输，这时候服务端响应ACK后如果有没有发送完的数据，服务端是可以继续发送的，因为它还没有关闭传输，只有服务端发送FIN后，客户端响应ACK，客户端和服务端才会依次进入CLOSE状态，这个过程三次挥手无法满足。")]),t._v(" "),a("p",[t._v("说到这里细心的朋友会发现上诉有两种状态还没有提到，分别为CLOSING和LISTEN，下面说下这两个状态：")]),t._v(" "),a("ol",[a("li",[t._v("LISTEN:")])]),t._v(" "),a("ul",[a("li",[t._v("上述三次握手之前因为客户端和服务端都是CLOSE状态，所以还会有一个状态就是服务端创建socket监听之后变为LISTEN状态，然后客户端发送SYN请求连接。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("CLOSING:")])]),t._v(" "),a("ul",[a("li",[t._v("如果客户端发送了FIN，但是没有收到服务器的ACK，却收到了服务器的FIN，因为网络传输有时会有意外情况，所以这个状态会在ACK丢包的时候表示。")])]),t._v(" "),a("h1",{attrs:{id:"浏览器强缓存与协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器强缓存与协商缓存"}},[t._v("#")]),t._v(" 浏览器强缓存与协商缓存")]),t._v(" "),a("p",[t._v("首先我们来总体感知一下它的匹配流程，如下： 1. 浏览器发送请求前，根据请求头的 expires 和 cache-control 判断是否命中（包括是否过期）强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。 2. 没有命中强缓存规则，浏览器会发送请求，根据请求头的"),a("code",[t._v("last-modified")]),t._v("和"),a("code",[t._v("etag")]),t._v("判断是否命中协商缓存，如果命中，直接从缓存获取资源。如果没有命中，则进入下一步。 3. 如果前两步都没有命中，则直接从服务端获取资源。")]),t._v(" "),a("p",[t._v("浏览器请求缓存状态码：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("200 OK (from cache) 是浏览器没有跟服务器确认，直接用了浏览器缓存；")])]),t._v(" "),a("li",[a("p",[t._v("304 Not Modified 是浏览器和服务器多确认了一次缓存有效性，再用的缓存。")])])]),t._v(" "),a("p",[t._v('304 Not Modified 比 200 OK (from cache) 慢，指的是浏览器还向服务器确认了下 "If-Not-Modified"，才用的缓存。')]),t._v(" "),a("h2",{attrs:{id:"http请求方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http请求方式"}},[t._v("#")]),t._v(" HTTP请求方式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("GET 查询")])]),t._v(" "),a("li",[a("p",[t._v("POST 添加")])]),t._v(" "),a("li",[a("p",[t._v("PUT 修改")])]),t._v(" "),a("li",[a("p",[t._v("DELETE 删除")])])]),t._v(" "),a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("浏览器有一个保护机制叫做同源策略，满足以下条件即为跨域：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同文件，不跨域")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同目录，不跨域")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同协议，跨域 ")]),t._v("\nhttps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同端口，跨域 ")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同域名，跨域 ")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同域名(父域名)，跨域 ")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同域名(子域名)，跨域 ")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同域名(ip)，跨域 ")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("119.254")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".98")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".162")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n")])])]),a("h2",{attrs:{id:"url的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url的概念"}},[t._v("#")]),t._v(" URL的概念")]),t._v(" "),a("p",[t._v("统一资源定位符（或称统一资源定位器/定位地址、URL地址等，英语：Uniform Resource Locator，常缩写为URL），有时也被俗称为 网页地址（网址）。如同在网络上的门牌，是因特网上标准的资源的地址（Address）。")]),t._v(" "),a("h3",{attrs:{id:"url的格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url的格式"}},[t._v("#")]),t._v(" URL的格式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("标准格式 协议类型:[//服务器地址[:端口号]][/资源层级UNIX文件路径]文件名?查询")])]),t._v(" "),a("li",[a("p",[t._v("完整格式 协议类型:[//[访问资源需要的凭证信息@]服务器地址[:端口号]][/资源层级UNIX文件路径]文件名?查询[#片段]")]),t._v(" "),a("ul",[a("li",[t._v("schema传送协议。")]),t._v(" "),a("li",[t._v("层级URL标记符号(为[//],固定不变)")]),t._v(" "),a("li",[t._v("user访问资源需要的凭证信息（可省略）")]),t._v(" "),a("li",[t._v("host服务器。（通常为域名，有时为IP地址）")]),t._v(" "),a("li",[t._v("port端口号。（以数字方式表示，若为HTTP的默认值“:80”可省略）")]),t._v(" "),a("li",[t._v("path路径。（以“/”字符区别路径中的每一个目录名称）")]),t._v(" "),a("li",[t._v("query查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）")]),t._v(" "),a("li",[t._v("fragment片段。以“#”字符为起点")])])])]),t._v(" "),a("h3",{attrs:{id:"url的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url的类型"}},[t._v("#")]),t._v(" URL的类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相对路径 ..上一级目录 .当前目录")])]),t._v(" "),a("li",[a("p",[t._v("绝对路径 /根目录")])])]),t._v(" "),a("h3",{attrs:{id:"浏览器解析url的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析url的过程"}},[t._v("#")]),t._v(" 浏览器解析URL的过程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("DNS解析")])]),t._v(" "),a("li",[a("p",[t._v("socket连接")])]),t._v(" "),a("li",[a("p",[t._v("发送http请求")])]),t._v(" "),a("li",[a("p",[t._v("服务器响应")])]),t._v(" "),a("li",[a("p",[t._v("断开连接")])])]),t._v(" "),a("h3",{attrs:{id:"浏览器解析href和src的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析href和src的不同"}},[t._v("#")]),t._v(" 浏览器解析href和src的不同")]),t._v(" "),a("p",[t._v("在这之前我们先了解一下href和src有什么不同：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("href 用于在当前文档和引用资源之间确立联系，也就是说href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系")])]),t._v(" "),a("li",[a("p",[t._v("src 在请求 src 资源时会将其指向的资源下载并应用到文档中，用于替换当前内容")])])]),t._v(" "),a("Copy")],1)}),[],!1,null,null,null);s.default=_.exports}}]);