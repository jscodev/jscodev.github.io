(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{372:function(t,s,a){"use strict";a.r(s);var r=a(42),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端安全"}},[t._v("#")]),t._v(" 前端安全")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://jsnice.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("反混淆工具"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("代码混淆顾名思义是把代码搞成地球人看不懂的乱码，把源代码可读性降低到令人发指的程度，看一眼晚上睡觉都在debugger，而目前市面上也是有很多混淆代码的工具比如UglifyJS，Webpack，甚至是在线"),a("a",{attrs:{href:"http://tool.chinaz.com/js.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("混淆加密工具"),a("OutboundLink")],1),t._v("，不过这一切的一切都不过是障眼法，因为凡是都有反面，既然有混淆就会有反混淆。")]),t._v(" "),a("p",[t._v("一般常见的混淆方式就是加废代码，拆解函数和变量，字符串拼接，转16进制，ast等等等等，也可以自己设计混淆算法。")]),t._v(" "),a("h2",{attrs:{id:"反混淆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反混淆"}},[t._v("#")]),t._v(" 反混淆")]),t._v(" "),a("p",[t._v("现在的几乎全部在线混淆工具混出来的代码都是用eval执行，那么我们都知道js是依赖浏览器的语言，那么执行到浏览器的眼里必然会是源代码，这个时候你只要把eval变成console.log原始代码就会出现在你的眼前，当然这种混淆手段非常低级，也没必要说太多。")]),t._v(" "),a("p",[t._v("现在开源优质项目那么多，其实一般我们写的代码也没有必要多么保密，在构建工具自带的压缩混淆就已经可以了，再设计更深奥的混淆算法有点得不偿失，所以关于这个知识点就说到这，有兴趣的同学可以自行深入。")]),t._v(" "),a("h2",{attrs:{id:"靶机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#靶机"}},[t._v("#")]),t._v(" 靶机")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Web For Pentester")])]),t._v(" "),a("li",[a("p",[t._v("DVWA 渗透练习场")])])]),t._v(" "),a("h2",{attrs:{id:"xss攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[t._v("#")]),t._v(" XSS攻击")]),t._v(" "),a("h3",{attrs:{id:"什么是xss攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是xss攻击"}},[t._v("#")]),t._v(" 什么是XSS攻击")]),t._v(" "),a("p",[t._v("XSS全称是Cross Site Scripting即跨站脚本，因为不想跟CSS重名取XSS，当目标网站目标用户浏览器渲染HTML文档的过程中，出现了不被预期的脚本指令并执行时，XSS就发生了。")]),t._v(" "),a("h3",{attrs:{id:"xss分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss分类"}},[t._v("#")]),t._v(" XSS分类")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("反射型XSS  发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码")])]),t._v(" "),a("li",[a("p",[t._v("存储型XSS  存储型XSS和反射型XSS的差别仅在于，提交的代码会存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码，比如留言板")])]),t._v(" "),a("li",[a("p",[t._v("DOM XSS  DOM XSS和反射型XSS、存储型XSS的差别在于DOM XSS的代码并不需要服务器参与，触发XSS靠的是浏览器端的DOM解析，完全是客户端的事情。")])])]),t._v(" "),a("h3",{attrs:{id:"常见的xss攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的xss攻击"}},[t._v("#")]),t._v(" 常见的XSS攻击：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//普通的XSS JavaScript注入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sanw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("org"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XSS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//img标签XSS使用JavaScript命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sanw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("org"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XSS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//大小写转换绕过检测")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sCript"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scRipt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a标签XSS使用JavaScript命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a href"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'javascript:alert(\"hi\")'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("除了列举的还有很多比如编码之类的不过万变不离其宗，就是换个方式使用而已，离不开XSS的原理，遇到问题对症下药就好。")]),t._v(" "),a("Copy")],1)}),[],!1,null,null,null);s.default=e.exports}}]);