(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{371:function(s,e,t){"use strict";t.r(e);var a=t(42),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"webassembly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webassembly"}},[s._v("#")]),s._v(" WebAssembly")]),s._v(" "),t("h2",{attrs:{id:"webassembly是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webassembly是什么"}},[s._v("#")]),s._v(" WebAssembly是什么？")]),s._v(" "),t("p",[s._v("WebAssembly 是一种可以使用非 JavaScript 编程语言编写代码并且能在浏览器上运行的技术方案，是浏览器应用设计一款通用的字节码标准。")]),s._v(" "),t("h2",{attrs:{id:"webassembly比javascript快在哪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webassembly比javascript快在哪"}},[s._v("#")]),s._v(" WebAssembly比javascript快在哪？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("文件加载 - WebAssembly 文件体积更小，所以下载速度更快。")])]),s._v(" "),t("li",[t("p",[s._v("解析 - 解码 WebAssembly 比解析 JavaScript 要快")])]),s._v(" "),t("li",[t("p",[s._v("编译和优化 - 编译和优化所需的时间较少，因为在将文件推送到服务器之前已经进行了更多优化，JavaScript 需要为动态类型多次编译代码")])]),s._v(" "),t("li",[t("p",[s._v("重新优化 - WebAssembly 代码不需要重新优化，因为编译器有足够的信息可以在第一次运行时获得正确的代码")])]),s._v(" "),t("li",[t("p",[s._v("执行 - 执行可以更快，WebAssembly 指令更接近机器码")])]),s._v(" "),t("li",[t("p",[s._v("垃圾回收 - WebAssembly垃圾回收都是手动控制的，所以比自动垃圾回收效率更高。")])])]),s._v(" "),t("p",[s._v("asm.js和WebAssembly一样是优化js执行效率的方案。JavaScript引擎发现运行的是asm.js，就知道这是经过优化的代码，可以跳过语法分析这一步，直接转成汇编语言。另外，浏览器还会调用WebGL通过GPU执行与普通的JavaScript脚本不同。而WebAssembly和asm.js差别是WebAssembly会转成二进制字节码，所以运行速度会比asm.js更快。")]),s._v(" "),t("h2",{attrs:{id:"emscripten"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#emscripten"}},[s._v("#")]),s._v(" Emscripten")]),s._v(" "),t("p",[s._v("Emscripten是用来转换asm.js的编译器，通常asm.js都是通过Emscripten编译生成，而不是手写，安装方式可以自行在"),t("a",{attrs:{href:"http://webassembly.org.cn/getting-started/developers-guide/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网查阅"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"可编译webassembly的语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可编译webassembly的语言"}},[s._v("#")]),s._v(" 可编译WebAssembly的语言")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("AssemblyScript: 语法和TypeScript一致")])]),s._v(" "),t("li",[t("p",[s._v("c\\c++: 官方推荐的方式")])]),s._v(" "),t("li",[t("p",[s._v("Rust: 语法复杂、学习成本高，对前端来说可能会不适应")])]),s._v(" "),t("li",[t("p",[s._v("Kotlin: 语法和 Java、JS 相似，语言学习成本低")])]),s._v(" "),t("li",[t("p",[s._v("Golang: 语法简单学习成本低")])])]),s._v(" "),t("p",[s._v("用Rust配合WebAssembly是目前比较好的选择。"),t("a",{attrs:{href:"https://www.rust-lang.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方网站"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"rust语言的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rust语言的特点"}},[s._v("#")]),s._v(" Rust语言的特点：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("高性能 - Rust 速度惊人且内存利用率极高。由于没有运行时和垃圾回收，它能够胜任对性能要求特别高的服务，可以在嵌入式设备上运行，还能轻松和其他语言集成。")])]),s._v(" "),t("li",[t("p",[s._v("可靠性 - Rust 丰富的类型系统和所有权模型保证了内存安全和线程安全，让您在编译期就能够消除各种各样的错误。")])]),s._v(" "),t("li",[t("p",[s._v("生产力 - Rust 拥有出色的文档、友好的编译器和清晰的错误提示信息， 还集成了一流的工具 —— 包管理器和构建工具， 智能地自动补全和类型检验的多编辑器支持， 以及自动格式化代码等等。")])])]),s._v(" "),t("h3",{attrs:{id:"rust-语言可以用于开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rust-语言可以用于开发"}},[s._v("#")]),s._v(" Rust 语言可以用于开发：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("传统命令行程序 - Rust 编译器可以直接生成目标可执行程序，不需要任何解释程序。")])]),s._v(" "),t("li",[t("p",[s._v("Web 应用 - Rust 可以被编译成 WebAssembly，WebAssembly 是一种 JavaScript 的高效替代品。")])]),s._v(" "),t("li",[t("p",[s._v("网络服务器 - Rust 用极低的资源消耗做到安全高效，且具备很强的大规模并发处理能力，十分适合开发普通或极端的服务器程序。")])]),s._v(" "),t("li",[t("p",[s._v("嵌入式设备 - Rust 同时具有JavaScript 一般的高效开发语法和 C 语言的执行效率，支持底层平台的开发。")])])]),s._v(" "),t("h2",{attrs:{id:"rust编译成webassembly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rust编译成webassembly"}},[s._v("#")]),s._v(" rust编译成WebAssembly")]),s._v(" "),t("h3",{attrs:{id:"环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[s._v("#")]),s._v(" 环境配置")]),s._v(" "),t("p",[s._v("需要安装Visual c++ build tools和Visual Studio"),t("a",{attrs:{href:"https://visualstudio.microsoft.com/zh-hans/downloads/",target:"_blank",rel:"noopener noreferrer"}},[s._v("传送门"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("安装下面这个依赖帮助我们生成WebAssembly文件：")]),s._v(" "),t("ul",[t("li",[s._v("wasm-pack  wasm-pack 是您一站式商店，用于构建，测试和发布Rust生成的WebAssembly。"),t("a",{attrs:{href:"https://rustwasm.github.io/wasm-pack/installer/",target:"_blank",rel:"noopener noreferrer"}},[s._v("下载"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("执行"),t("code",[s._v("wasm-pack build --scope mynpmusername")]),s._v("会帮你做下面几件事：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("将你的Rust代码编译成 WebAssembly。")])]),s._v(" "),t("li",[t("p",[s._v("在编译好的WebAssembly代码基础上运行wasm-bindgen，生成一个JavaScript文件将WebAssembly文件包装成一个模块以便npm能够识别它。")])]),s._v(" "),t("li",[t("p",[s._v("创建一个pkg文件夹并将JavaScript文件和生成的WebAssembly代码移到其中。")])]),s._v(" "),t("li",[t("p",[s._v("读取你的Cargo.toml并生成相应的 package.json。")])]),s._v(" "),t("li",[t("p",[s._v("复制你的README.md(如果有的话) 到文件夹中。")])])]),s._v(" "),t("p",[s._v("还需要配置项目中的Cargo.toml文件，详细配置请看"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/WebAssembly/Rust_to_wasm",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1)]),s._v(" "),t("Copy")],1)}),[],!1,null,null,null);e.default=r.exports}}]);